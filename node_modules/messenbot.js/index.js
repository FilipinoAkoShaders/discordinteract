const express = require('express')
const morgan = require('morgan')
const bodyParser = require('body-parser')
const EventEmitter = require('events')
const request = require('request')
const http = require('http')
const fs = require('fs')
const path = require('path')
const { Facebook } = require('fb')

module.exports.Bot = class Bot extends EventEmitter {
        /**
        * @description Create your messenger bot!
        *
        * @param {Object}  options - Application and verification option
        * @param {String}  options.verifyToken - 
        * @param {String}  options.accessToken - 
        * @param {String}  options.pageId - 
        * @param {Boolean} options.debug - 
        */
        constructor(options) {
                super()
                
                if(!options) throw new Error('Please input the options')
                if(!options.verifyToken) throw new Error('Please input the webhook verify token')
                if(!options.accessToken) throw new Error('Please input the page access token')
                if(!options.pageId) throw new Error('Please input the page id')
                
                this._app = express()
                this._verifyToken = options.verifyToken
                this._accessToken = options.accessToken
                this._pageId = options.pageId
                this._debug = options.debug || false
                this._fb = new Facebook({ version: "v15.0" })
                
                this.id = this._pageId

                this._fb.setAccessToken(this._accessToken)
        }

        /**
        * @description Start the bot
        *
        * @param {String}  domain - This is optional! if you want to use your own custom domain then put it here
        */
        login(domain) {              
                if(typeof domain !== "string" && domain) throw new Error('Custom domain is not a string! type found is '+typeof domain)

                let app = this._app
                let master = this
                let tokens = {
                        verify: this._verifyToken,
                        access: this._accessToken,
                        id: this._pageId
                }
                let fb = this._fb

                let newNum = Math.floor(Math.random() * (50 - 1 + 1) + 1)

                if(this._debug) app.use(morgan('dev'));

                let currentversion = require('./package.json').version
                
                app.use(bodyParser.urlencoded({ extended:false }));
                app.use(bodyParser.json());
                app.use(express.static(process.cwd()))

                app.get('/', async(req, res) => {
                        res.send('MessenBot.js is on service! Version: '+currentversion)
                })
                
                app.get(`/webhook`, async(req, res) => {
                        if (req.query['hub.verify_token'] === tokens.verify){
                                master.emit('verified')
                                res.status(200).send(req.query['hub.challenge']);
                        } else {
                                master.emit('error', 'Verification failed. Token mismatch.');
                                res.sendStatus(403);
                        }
                })

                app.post('/getfile', async(req, res) => {
                        let filepath = req.body.filepath

                        if(fs.existsSync(path.join(process.cwd(), filepath))) return res.sendStatus(404)

                        let json = JSON.stringify({
                                url: "https://"+req.hostname+'/'+filepath
                        })
                        
                        res.send(json)
                })

                app.post(`/webhook`, async(req, res) => {
                        if (req.body.object === 'page'){
                                req.body.entry.forEach(function(entry) {
                                        entry.messaging.forEach(function(event) {
                                                event.sendMessage = function(text) {
                                                        if(typeof text !== "string") return master.emit("error", "Cannot find text "+text || "undefined"+"!")
                                                        
                                                        return new Promise(function(resolve, reject) {
                                                                fb.api(`${tokens.id}/messages`, 'post', {
                                                                        recipient: {
                                                                                id: event.sender.id
                                                                        },
                                                                        message: {
                                                                                text: String(text)
                                                                        }
                                                                }, async(res) => {
                                                                        if(!res || res.error) {
                                                                                master.emit("error", "Error sending message: " + res.error || 'NOT OK')

                                                                                reject(res.error || 'NOT OK')
                                                                        } else {
                                                                                resolve(res)
                                                                        }
                                                                })
                                                        })
                                                }

                                                event.sendFile = function(filepath, type) {
                                                        if(fs.existsSync(path.join(process.cwd(), filepath))) return master.emit("error", "Cannot find file "+filepath || "undefined"+" in "+process.cwd()+"!")
                                                        if(typeof type !== "string") return master.emit("error", "Cannot find type "+type || "undefined"+"!")

                                                        let url = "https://"+req.hostname+'/'+filepath
                                                        
                                                        return new Promise(function(resolve, reject) {
                                                                fb.api(`${tokens.id}/messages`, 'post', {
                                                                        recipient: {
                                                                                id: event.sender.id
                                                                        },
                                                                        message: {
                                                                                attachment: {
                                                                                        type: type,
                                                                                        payload: {
                                                                                                url: url,
                                                                                                is_reusable: true
                                                                                        }
                                                                                }
                                                                        }
                                                                }, async(res) => {
                                                                        if(!res || res.error) {
                                                                                master.emit("error", "Error sending message: " + res.error || 'NOT OK')

                                                                                reject(res.error || 'NOT OK')
                                                                        } else {
                                                                                resolve(res)
                                                                        }
                                                                })
                                                        })
                                                }

                                                event.sendMessageTo = function(text, recipientid) {
                                                        if(typeof text !== "string") return master.emit("error", "Cannot find text "+text || "undefined"+"!")
                                                        if(typeof recipientid !== "string") return master.emit("error", "Cannot find id "+recipientid || "undefined"+"!")
                                                        
                                                        return new Promise(function(resolve, reject) {
                                                                fb.api(`${tokens.id}/messages`, 'post', {
                                                                        recipient: {
                                                                                id: recipientid
                                                                        },
                                                                        message: {
                                                                                text: String(text)
                                                                        }
                                                                }, async(res) => {
                                                                        if(!res || res.error) {
                                                                                master.emit("error", "Error sending message: " + res.error || 'NOT OK')

                                                                                reject(res.error || 'NOT OK')
                                                                        } else {
                                                                                resolve(res)
                                                                        }
                                                                })
                                                        })
                                                }

                                                event.sendFileTo = function(url, type, recipientid) {
                                                        if(typeof recipientid !== "string") return master.emit("error", "Cannot find id "+recipientid || "undefined"+"!")
                                                        if(typeof url !== "string") return master.emit("error", "Cannot find url "+url || "undefined"+"!")
                                                        if(typeof type !== "string") return master.emit("error", "Cannot find type "+type || "undefined"+"!")

                                                        
                                                        return new Promise(function(resolve, reject) {
                                                                fb.api(`${tokens.id}/messages`, 'post', {
                                                                        recipient: {
                                                                                id: recipientid
                                                                        },
                                                                        message: {
                                                                                attachment: {
                                                                                        type: type,
                                                                                        payload: {
                                                                                                url: url,
                                                                                                is_reusable: true
                                                                                        }
                                                                                }
                                                                        }
                                                                }, async(res) => {
                                                                        if(!res || res.error) {
                                                                                master.emit("error", "Error sending message: " + res.error || 'NOT OK')

                                                                                reject(res.error || 'NOT OK')
                                                                        } else {
                                                                                resolve(res)
                                                                        }
                                                                })
                                                        })
                                                }
                                                
                                                event.sendAction = function(action) {
                                                        return new Promise((resolve, reject) => {
                                                                if(typeof action !== "string") return master.emit("error", "Cannot find action "+action || "undefined"+"!")
                                                                        
                                                                fb.api(`${tokens.id}/messages`, 'post', {
                                                                        recipient: {
                                                                                id: event.sender.id
                                                                        },
                                                                        message: {
                                                                                attachment: {
                                                                                        type: type,
                                                                                        "sender_action": action
                                                                                }
                                                                        }
                                                                }, async(res) => {
                                                                        if(!res || res.error) {
                                                                                master.emit("error", "Error sending message: " + res.error || 'NOT OK')

                                                                                reject(res.error || 'NOT OK')
                                                                        } else {
                                                                                resolve(res)
                                                                        }
                                                                })
                                                        })
                                                }
                                                
                                                if (event.postback){
                                                        master.emit('postback', event)
                                                } else if (event.message){
                                                        master.emit('message', event)
                                                }
                                        });
                                });
                                res.sendStatus(200);
                        }
                })
                
                http.createServer(app).listen(5000, domain, async() => {
                        console.log('Webhook has been hosted! With PORT '+5000)
                        console.log('Messenger webhook callback path '+`/webhook`+' (add it to your domain)')
                        master.emit('ready')
                })
        }

        /**
        * @description Send message to an specific user
        * 
        * @param {String}  text - The message to send
        * @param {String}  recipientid - User id
        */
        sendMessageTo(text, recipientid) {
                if(typeof text !== "string") return this.emit("error", "Cannot find text "+text || "undefined"+"!")
                if(typeof recipientid !== "string") return this.emit("error", "Cannot find id "+recipientid || "undefined"+"!")

                let tokens = {
                        id: this._pageId,
                        access: this._accessToken
                }

                let fb = this._fb
                
                return new Promise(function(resolve, reject) {
                        fb.api(`${tokens.id}/messages`, 'post', {
                                recipient: {
                                        id: recipientid
                                },
                                message: {
                                        text: String(text)
                                }
                        }, async(res) => {
                                if(!res || res.error) {
                                        master.emit("error", "Error sending message: " + res.error || 'NOT OK')

                                        reject(res.error || 'NOT OK')
                                } else {
                                        resolve(res)
                                }
                        })
                })
        }

        /**
        * @description Send action to an specific user
        * 
        * @param {String}  action - The action to send
        * @param {String}  recipientid - User id
        */
        sendActionTo(action, recipientid) {
                if(typeof action !== "string") return this.emit("error", "Cannot find text "+text || "undefined"+"!")
                if(typeof recipientid !== "string") return this.emit("error", "Cannot find id "+recipientid || "undefined"+"!")

                let tokens = {
                        id: this._pageId,
                        access: this._accessToken
                }

                let fb = this._fb
                
                return new Promise(function(resolve, reject) {
                        fb.api(`${tokens.id}/messages`, 'post', {
                                recipient: {
                                        id: recipientid
                                },
                                "sender_action": action
                        }, async(res) => {
                                if(!res || res.error) {
                                        master.emit("error", "Error sending message: " + res.error || 'NOT OK')

                                        reject(res.error || 'NOT OK')
                                } else {
                                        resolve(res)
                                }
                        })
                })
        }
        
        /**
        * @description Send file to an specific user
        * 
        * @param {String}  url - The url of file to send
        * @param {String}  type - The type of file
        * @param {String}  recipientid - User id
        */
        sendFileTo(url, type, recipientid) {
                if(typeof recipientid !== "string") return master.emit("error", "Cannot find id "+recipientid || "undefined"+"!")
                if(typeof url !== "string") return master.emit("error", "Cannot find url "+url || "undefined"+"!")
                if(typeof type !== "string") return master.emit("error", "Cannot find type "+type || "undefined"+"!")

                let tokens = {
                        id: this._pageId,
                        access: this._accessToken
                }

                let fb = this._fb
                
                return new Promise(function(resolve, reject) {
                        fb.api(`${tokens.id}/messages`, 'post', {
                                recipient: {
                                        id: recipientid
                                },
                                message: {
                                        attachment: {
                                                type: type,
                                                payload: {
                                                        url: url,
                                                        is_reusable: true
                                                }
                                        }
                                }
                        }, async(res) => {
                                if(!res || res.error) {
                                        master.emit("error", "Error sending message: " + res.error || 'NOT OK')

                                        reject(res.error || 'NOT OK')
                                } else {
                                        resolve(res)
                                }
                        })
                })
        }
}